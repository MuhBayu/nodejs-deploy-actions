name: Docker Image CI

on:
  push:
    branches: [ action ]

  pull_request:
    branches: [ action ]
    

env:
  IMAGE_NAME: nodejs-deploy
  CONTAINER_NAME: service-1
  IMAGE_REG: docker.pkg.github.com/${{ github.actor }}/$IMAGE_NAME

jobs:

  build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag $IMAGE_NAME:$GITHUB_RUN_NUMBER

    - name: Log into registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
        
    - name: Push image
      run: |
        IMAGE_ID=docker.pkg.github.com/${{ github.actor }}/$IMAGE_NAME
        echo $IMAGE_REG
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag $IMAGE_NAME:$GITHUB_RUN_NUMBER $IMAGE_ID:$GITHUB_RUN_NUMBER
        docker push $IMAGE_ID:$GITHUB_RUN_NUMBER

  
  deploy:
    needs: [build]
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    
    - name: Log into registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

    - name: Running Container
      run: |
        IMAGE_ID=docker.pkg.github.com/${{ github.actor }}/$IMAGE_NAME
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        
        docker pull $IMAGE_ID:$GITHUB_RUN_NUMBER
        docker kill $CONTAINER_NAME || true
        docker run -d -p 3000:3000 --name $CONTAINER_NAME $IMAGE_ID:$GITHUB_RUN_NUMBER
  
  clean:
    needs: [deploy]
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    - name: Cleaning Images
      run: |
        docker image prune -f || true
        docker images -a | grep "$IMAGE_NAME" | awk '{print $3}' | xargs docker rmi || true
